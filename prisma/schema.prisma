// Schéma de base de données Prisma pour CollabSpace
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle User
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Mot de passe hashé
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      ProjectMember[]
  tasks         Task[]
  comments      Comment[]
  messages      Message[]
  notifications Notification[]

  @@map("users")
}

// Modèle Account (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modèle Session (NextAuth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modèle VerificationToken (NextAuth)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Modèle Project
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members ProjectMember[]
  tasks   Task[]

  @@map("projects")
}

// Modèle ProjectMember
model ProjectMember {
  id        String    @id @default(cuid())
  userId    String
  projectId String
  role      MemberRole @default(MEMBER)
  joinedAt  DateTime  @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

// Modèle Task
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId String
  assigneeId String?
  
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?     @relation(fields: [assigneeId], references: [id])
  comments Comment[]

  @@map("tasks")
}

// Modèle Comment
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Modèle Message (Chat)
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Modèle Room (Chat Rooms)
model Room {
  id        String   @id @default(cuid())
  name      String
  type      RoomType @default(PROJECT)
  createdAt DateTime @default(now())

  // Relations
  messages Message[]

  @@map("rooms")
}

// Modèle Notification
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RoomType {
  PROJECT
  DIRECT
  TEAM
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_INVITATION
  MESSAGE
  SYSTEM
}
